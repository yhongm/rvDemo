!function(e){var t={};function i(r){if(t[r])return t[r].exports;var l=t[r]={i:r,l:!1,exports:{}};return e[r].call(l.exports,l,l.exports,i),l.l=!0,l.exports}i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)i.d(r,l,function(t){return e[t]}.bind(null,l));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";var r,l=i(1),s=(r=l)&&r.__esModule?r:{default:r};var n=void 0;window.clickDiv=function(){n.data.parent="click Div time:"+new Date/1e3},window.clickP1=function(){n.data.child="click p1 time:"+new Date/1e3},window.clickP2=function(){n.data.child2="click p2 time:"+new Date/1e3},window.onload=function(){(n=new s.default({el:"#app",data:{parent:"parent",child:"child",pcolor:"red",c1color:"blue",c2color:"green",child2:"child2"},dom:{tag:"div",props:{key:"1",style:"color:%#pcolor#%,width:100px,height:100px",onclick:"clickDiv()"},children:["%#parent#%",{tag:"p",props:{key:"2",style:"color:%#c1color#%,width:50px,height:50px",onclick:"clickP1()"},children:["%#child#%"]},{tag:"p",props:{key:"3",style:"color:%#c2color#%,width:50px,height:50px",onclick:"clickP2()"},children:["%#child2#%"]}]}})).watch("parent",function(){alert("parent,change")}),n.watch("child",function(){alert("child,change")}),n.watch("child2",function(){alert("child2,change")})}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);const NODE_REPLACE=0,CHILD_RE_ORDER=1,NODE_PROPS=2,NODE_CONTENT=3;class Element{constructor(e,t,i){if(!(this instanceof Element))return new Element(tagName,t,i);if(this.tag=e,this.props=t||{},this.children=i||[],this.key=t?t.key:void 0,!this.key)throw new Error(`${e} ... html tag the key is undefined`);let r=0;this.children.forEach(e=>{e instanceof Element&&(r+=e.count),r++}),this.count=r}render(){const e=document.createElement(this.tag),t=this.props;for(const i in t)Util.setAttr(e,i,t[i]);return this.children.forEach(t=>{const i=t instanceof Element?t.render():document.createTextNode(t);e.appendChild(i)}),e}}class Diff{constructor(e,t){this.index=0,this.patches={},this.dfsWalk(e,t,this.index)}dfsWalk(e,t,i){let r=[];if(null==t);else if(Util.isString(e)&&Util.isString(t))e!=t&&r.push({type:NODE_CONTENT,content:t});else if(e.tagName===t.tagName&&e.key==t.key){let l=this.diffProps(e,t);l&&r.push({type:NODE_PROPS,props:l}),Util.isIgnoreChildren(t)||this.diffChildren(e.children,t.children,i,r)}else r.push({type:NODE_REPLACE,node:t});r.length&&(this.patches[i]=r)}diffProps(e,t){const i=e.props,r=t.props,l={};let s=!0;for(let e in i)r[e]!==i[e]&&(s=!1,l[e]=r[e]);for(let e in r)i.hasOwnProperty(e)||(s=!1,l[e]=r[e]);return s?null:l}diffChildren(e,t,i,r){let l=new DiffList(e,t).getResult();if(t=l.child,l.moves.length){let e={type:CHILD_RE_ORDER,moves:l.moves};r.push(e)}let s=null,n=i;e.forEach((e,i)=>{let r=t[i];n=s&&s.count?n+s.count+1:n+1,this.dfsWalk(e,r,n),s=e})}}class Patch{constructor(e,t){this.dfsWalk(e,{index:0},t)}dfsWalk(e,t,i){let r=i[t.index],l=e.childNodes?e.childNodes.length:0;for(let r=0;r<l;r++){let l=e.childNodes[r];t.index++,this.dfsWalk(l,t,i)}r&&this.applyPatches(e,r)}applyPatches(e,t){t.forEach(t=>{switch(t.type){case NODE_REPLACE:let i=Util.isString(t.node)?document.createTextNode(t.node):t.node.render();e.parentNode.replaceChild(i,e);break;case CHILD_RE_ORDER:this.reorderChildren(e,t.moves);break;case NODE_PROPS:this.setProps(e,t.props);break;case NODE_CONTENT:e.textContent?e.textContent=t.content:e.nodeValue=t.content}})}reorderChildren(e,t){let i=Util.toArray(e.childNodes),r={};i.forEach(e=>{if(1===e.nodeType){let t=e.getAttribute("key");t&&(r[t]=e)}}),t.forEach(t=>{let l=t.index;if(0===t.type)i[l]===e.childNodes[l]&&e.removeChild(e.childNodes[l]),i.splice(l,1);else if(1===t.type){let s=r[t.item.key]?r(t.item.key).cloneNode(!0):Util.isString(t.item)?document.createTextNode(t.item):t.item.render();i.splice(l,0,s),e.insertBefore(s,e.childNodes[l]||null)}})}setProps(e,t){for(let i in t)if(void 0===t[i])e.removeAttribute(i);else{const r=t[i];Util.setAttr(e,i,r)}}}class Util{static isString(e){return"string"==typeof e}static toArray(e){if(!e)return[];let t=[];for(let i=0;i<e.length;i++)t.push(e[i]);return t}static isForIn(e){return/^\w* _in_ \w*$/.test(e)}static isForForIn(e){return/^\w* _in*$/.test(e)}static isForOrForFor(e){return/^\w* _in_ \w|_in*$/.test(e)}static isIgnoreChildren(e){return e.props&&e.props.hasOwnProperty("ignore")}static isNumber(e){if(null==e||""===e)return!1;if("string"==typeof e){return!!(/^\d+$/.test(e)||/^-\d+$/.test(e)||/^[1-9]\d*[.]\d+$/.test(e)||/^0[.]\d+$/.test(e)||/^-[1-9]\d*[.]\d+$/.test(e)||/^-0[.]\d+$/.test(e))}return"number"==typeof e}static setAttr(e,t,i){switch(t){case"style":e.style.cssText=i;break;case"value":let r=e.tagName||"";"input"===(r=r.toLowerCase())||"textarea"===r?e.value=i:e.setAttribute(t,i);break;default:e.setAttribute(t,i)}}static isPlaceHolder(e){return!!e&&!!/^%#\w*.\w*#%$/.test(e)}static isDotOperatorExpression(e){return/^\w*\.\w*$/.test(e)}static getPlaceHolderValue(e){return e.slice(2,-2)}static isOperatorExpression(e){return!!Util.isString(e)&&!!/^\{\w*|\|\%+\}$/.test(e)}static getOperatorExpression(content,data,dataKey){if(Util.isString(content)){var expression=content.slice(content.indexOf("{")+1,content.indexOf("}"));let startIndex=expression.indexOf("%#"),endIndex=expression.indexOf("#%")+2;if(-1!=startIndex&&-1!=endIndex&&startIndex<endIndex){let e=expression.slice(startIndex,endIndex),t;if(e.indexOf(".")>0){if(Util.getPlaceHolderValue(e).split(".")[0]===dataKey){let i=data[Util.getPlaceHolderValue(e).split(".")[1]];t=Util.isNumber(i)?i:`"${i}"`}}else t=data[Util.getPlaceHolderValue(e)];expression=expression.replace(e,t)}return eval(expression)}}}class DiffList{constructor(e,t){let i=this.makeKeyIndex(e).keyIndex,r=this.makeKeyIndex(t).keyIndex;this.moveOperator=[],this.childList=[];for(let i=0;i<e.length;i++){let l=e[i],s=this.getKey(l);r.hasOwnProperty(s)?this.childList.push(t[r[s]]):this.childList.push(null)}this.tempList=this.childList.slice(0);let l=0;for(;l<this.tempList.length;)null===this.tempList[l]?(this.remove(l),this.removeCopyTempList(l)):l++;let s=0;for(let e=0;e<t.length;e++){let r=t[e],l=this.getKey(r),n=this.tempList[s],o=this.getKey(n);if(n)if(l!=o)if(i.hasOwnProperty(l)){l===getKey(this.tempList[s+1])?(this.remove(e),this.removeCopyTempList(s),s++):this.insert(e,r)}else this.insert(e,r);else s++;else this.insert(e,r)}let n=this.tempList.length-s;for(;s++<this.tempList.length;)n--,this.remove(n+t.length)}makeKeyIndex(e){let t={};for(let i=0;i<e.length;i++){let r=e[i];t[this.getKey(r)]=i}return{keyIndex:t}}getKey(e){if(e)return e.key}removeCopyTempList(e){this.tempList.splice(e,1)}remove(e){this.moveOperator.push({index:e,type:0})}insert(e,t){this.moveOperator.push({index:e,item:t,type:1})}getResult(){return{moves:this.moveOperator,child:this.childList}}}function observe(e,t,i){return Object.keys(e).forEach(r=>{let l=e[r],s=new Observable;t.put(r,s),Object.defineProperty(e,r,{get:()=>(s.add(i),l),set(e){const t=l!==e;l=e,t&&s.invoke()}})}),e}function Observable(){this.updateFunctions=new Set}function clone(e){let t,i=e=>null===e?"null":void 0===e?"undefined":Object.prototype.toString.call(e).slice(8,-1),r=i(e);if("Object"===r)t={};else{if("Array"!==r)return e;t=[]}for(key in e){let r=e[key];"Object"==i(r)?t[key]=arguments.callee(r):"Array"==i(r)?t[key]=arguments.callee(r):t[key]=e[key]}return t}function h(e,t,i){return new Element(e,t,i)}function diff(e,t){return new Diff(e,t).patches}function patch(e,t){return new Patch(e,t)}Observable.prototype.add=function(e){this.updateFunctions.add(e)},Observable.prototype.invoke=function(){this.updateFunctions.forEach(e=>e())};class Map{constructor(){this.length=0,this.map=new Object}put(e,t){e in this.map||this.length++,this.map[e]=t}get(e){return e in this.map?this.map[e]:null}remove(e){e in this.map&&(delete this.map[e],this.length--)}size(){return this.length}clear(){length=0,this.map=new Object}}class RV{constructor(e){const{el:t,data:i,dom:r}=e;let l=Util.isString(t)?document.querySelector(t):t;this.data=i,this.ve=this.getVirtualElement(this.applyTruthfulData(r)),this.w=this.ve.render(),l.appendChild(this.w),this.observeMap=new Map,observe(this.data,this.observeMap,()=>{this.updatedom(r)}),this.updatedom(r)}updatedom(e){let t=this.getVirtualElement(this.applyTruthfulData(e));window.nve=t,window.ve=this.ve,patch(this.w,diff(this.ve,t)),this.ve=t}watch(e,t){this.observeMap.get(e).add(t)}getVirtualElement(e){let t=[];for(let i in e.children){let r=e.children[i];if(r instanceof Array)r.forEach(e=>{let i=this.getVirtualElement(e);t.push(i)});else if(r instanceof Object){let e=this.getVirtualElement(r);t.push(e)}else t.push(r)}return h(e.tag,e.props,t)}applyTruthfulData(e){if("for"in e.props){let t,i=[];if(!Util.isForIn)throw new Error("the for directive use error");"childDomDatakey"in e?(i=e.data,t=e.childDomDatakey):"domDataKey"in e?(e.props.for.split(" _in_ ")[1]===e.domDataKey&&(i=e.data),t=e.props.for.split(" _in_ ")[0]):(i=this.data[e.props.for.split(" _in_ ")[1]],t=e.props.for.split(" _in_ ")[0]);let r=[];return i.forEach(i=>{let l=this.vdom2rdom(e,i,t,i);r.push(l)}),r}{let t,i;return"data"in e?(t=e.data,i=e.childDomDatakey):(t=this.data,i=void 0),this.vdom2rdom(e,t,i,this.data)}}vdom2rdom(e,t,i,r){let l={};l.tag=e.tag,l.children=[],l.props={};let s=Object.keys(e.props);for(let n in s){let o=s[n];if("style"===o){let r=e.props[o];if(r.indexOf(",")>-1){let e=r.split(",");l.props[o]=this.handleArrayStyle(t,e,i)}else l.props[o]=this.handleSingleStyle(t,r,i)}else Util.isPlaceHolder(e.props[o])?Util.isDotOperatorExpression(Util.getPlaceHolderValue(e.props[o]))?l.props[o]=t[Util.getPlaceHolderValue(e.props[o]).split(".")[1]]:l.props[o]=r[Util.getPlaceHolderValue(e.props[o])]:Util.isOperatorExpression(e.props[o])?l.props[o]=Util.getOperatorExpression(e.props[o],t,i):l.props[o]=e.props[o]}for(let s in e.children)Util.isString(e.children[s])?Util.isPlaceHolder(e.children[s])?-1==Util.getPlaceHolderValue(e.children[s]).indexOf(i)?l.children[s]=r[Util.getPlaceHolderValue(e.children[s])]:l.children[s]=t[Util.getPlaceHolderValue(e.children[s]).split(".")[1]]:l.children[s]=e.children[s]:(e.children[s]instanceof Object&&("childDomData"in e.props?(e.children[s].childDomDatakey=e.props.childDomData,e.children[s].data=t):"domData"in e.props&&(e.children[s].domDataKey=e.props.domData,e.children[s].data=t[s]),e.children[s].data=t),l.children[s]=this.applyTruthfulData(e.children[s]));return l}handleSingleStyle(e,t,i){let r="";if(i)if(Util.isPlaceHolder(t))if(-1!=Util.getPlaceHolderValue(t).indexOf(i)){r=e[Util.getPlaceHolderValue(t).split(".")[1]]}else{let i=t.split(":")[0],l=t.split(":")[1];r=i+":"+(l=e[Util.getPlaceHolderValue(l)])}else r=t;else{let i=t.split(":")[0],l=t.split(":")[1];r=Util.isPlaceHolder(l)?i+":"+(l=e[Util.getPlaceHolderValue(l)]):t}return r}handleArrayStyle(e,t,i){let r="";for(let l of t){r+=this.handleSingleStyle(e,l,i)+";"}return r}}__webpack_exports__.default=RV}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,