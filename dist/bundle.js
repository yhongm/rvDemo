!function(e){var t={};function r(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(i,s,function(t){return e[t]}.bind(null,s));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";var i,s=r(1),l=(i=s)&&i.__esModule?i:{default:i};var n=void 0;window.clickDiv=function(){n.data.parent="click Div time:"+new Date/1e3},window.clickP1=function(){n.data.child="click p1 time:"+new Date/1e3},window.clickP2=function(){n.data.child2="click p2 time:"+new Date/1e3},window.onload=function(){(n=new l.default({el:"#app",data:{parent:"parent",child:"child",pcolor:"red",c1color:"blue",c2color:"green",child2:"child2"},dom:{tag:"div",props:{key:"1",style:"color:%#pcolor#%,width:100px,height:100px",onclick:"clickDiv()"},children:["%#parent#%",{tag:"p",props:{key:"2",style:"color:%#c1color#%,width:50px,height:50px",onclick:"clickP1()"},children:["%#child#%"]},{tag:"p",props:{key:"3",style:"color:%#c2color#%,width:50px,height:50px",onclick:"clickP2()"},children:["%#child2#%"]}]}})).watch("parent",function(){alert("parent,change")}),n.watch("child",function(){alert("child,change")}),n.watch("child2",function(){alert("child2,change")})}},function(e,t,r){"use strict";r.r(t);const i=0,s=1,l=2,n=3;class o{constructor(e,t,r){if(!(this instanceof o))return new o(tagName,t,r);if(this.tag=e,this.props=t||{},this.children=r||[],this.key=t?t.key:void 0,!this.key)throw new Error(`${e} ... the key is undefined`);let i=0;this.children.forEach(e=>{e instanceof o&&(i+=e.count),i++}),this.count=i}render(){const e=document.createElement(this.tag),t=this.props;for(const r in t)h.setAttr(e,r,t[r]);return this.children.forEach(t=>{const r=t instanceof o?t.render():document.createTextNode(t);e.appendChild(r)}),e}}class a{constructor(e,t){this.index=0,this.patches={},this.dfsWalk(e,t,this.index)}dfsWalk(e,t,r){let s=[];if(null==t);else if(h.isString(e)&&h.isString(t))e!=t&&s.push({type:n,content:t});else if(e.tagName===t.tagName&&e.key==t.key){let i=this.diffProps(e,t);i&&s.push({type:l,props:i}),h.isIgnoreChildren(t)||this.diffChildren(e.children,t.children,r,s)}else s.push({type:i,node:t});s.length&&(this.patches[r]=s)}diffProps(e,t){const r=e.props,i=t.props,s={};let l=!0;for(let e in r)i[e]!==r[e]&&(l=!1,s[e]=i[e]);for(let e in i)r.hasOwnProperty(e)||(l=!1,s[e]=i[e]);return l?null:s}diffChildren(e,t,r,i){let l=new p(e,t).getResult();if(t=l.child,l.moves.length){let e={type:s,moves:l.moves};i.push(e)}let n=null,o=r;e.forEach((e,r)=>{let i=t[r];o=n&&n.count?o+n.count+1:o+1,this.dfsWalk(e,i,o),n=e})}}class c{constructor(e,t){this.dfsWalk(e,{index:0},t)}dfsWalk(e,t,r){let i=r[t.index],s=e.childNodes?e.childNodes.length:0;for(let i=0;i<s;i++){let s=e.childNodes[i];t.index++,this.dfsWalk(s,t,r)}i&&this.applyPatches(e,i)}applyPatches(e,t){t.forEach(t=>{switch(t.type){case i:let r=h.isString(t.node)?document.createTextNode(t.node):t.node.render();e.parentNode.replaceChild(r,e);break;case s:this.reorderChildren(e,t.moves);break;case l:this.setProps(e,t.props);break;case n:e.textContent?e.textContent=t.content:e.nodeValue=t.content}})}reorderChildren(e,t){let r=h.toArray(e.childNodes),i={};r.forEach(e=>{if(1===e.nodeType){let t=e.getAttribute("key");t&&(i[t]=e)}}),t.forEach(t=>{let s=t.index;if(0===t.type)r[s]===e.childNodes[s]&&e.removeChild(e.childNodes[s]),r.splice(s,1);else if(1===t.type){let l=i[t.item.key]?i(t.item.key).cloneNode(!0):h.isString(t.item)?document.createTextNode(t.item):t.item.render();r.splice(s,0,l),e.insertBefore(l,e.childNodes[s]||null)}})}setProps(e,t){for(let r in t)if(void 0===t[r])e.removeAttribute(r);else{const i=t[r];h.setAttr(e,r,i)}}}class h{static isString(e){return"string"==typeof e}static toArray(e){if(!e)return[];let t=[];for(let r=0;r<e.length;r++)t.push(e[r]);return t}static isForIn(e){return/^\w* _in_ \w*$/.test(e)}static isForForIn(e){return/^\w* _in*$/.test(e)}static isForOrForFor(e){return/^\w* _in_ \w|_in*$/.test(e)}static isIgnoreChildren(e){return e.props&&e.props.hasOwnProperty("ignore")}static setAttr(e,t,r){switch(t){case"style":e.style.cssText=r;break;case"value":let i=e.tagName||"";"input"===(i=i.toLowerCase())||"textarea"===i?e.value=r:e.setAttribute(t,r);break;default:e.setAttribute(t,r)}}}class p{constructor(e,t){let r=this.makeKeyIndex(e).keyIndex,i=this.makeKeyIndex(t).keyIndex;this.moveOperator=[],this.childList=[];for(let r=0;r<e.length;r++){let s=e[r],l=this.getKey(s);i.hasOwnProperty(l)?this.childList.push(t[i[l]]):this.childList.push(null)}this.tempList=this.childList.slice(0);let s=0;for(;s<this.tempList.length;)null===this.tempList[s]?(this.remove(s),this.removeCopyTempList(s)):s++;let l=0;for(let e=0;e<t.length;e++){let i=t[e],s=this.getKey(i),n=this.tempList[l],o=this.getKey(n);if(n)if(s!=o)if(r.hasOwnProperty(s)){s===getKey(this.tempList[l+1])?(this.remove(e),this.removeCopyTempList(l),l++):this.insert(e,i)}else this.insert(e,i);else l++;else this.insert(e,i)}let n=this.tempList.length-l;for(;l++<this.tempList.length;)n--,this.remove(n+t.length)}makeKeyIndex(e){let t={};for(let r=0;r<e.length;r++){let i=e[r];t[this.getKey(i)]=r}return{keyIndex:t}}getKey(e){if(e)return e.key}removeCopyTempList(e){this.tempList.splice(e,1)}remove(e){this.moveOperator.push({index:e,type:0})}insert(e,t){this.moveOperator.push({index:e,item:t,type:1})}getResult(){return{moves:this.moveOperator,child:this.childList}}}function d(){this.updateFunctions=new Set}d.prototype.add=function(e){this.updateFunctions.add(e)},d.prototype.invoke=function(){this.updateFunctions.forEach(e=>e())};class u{constructor(){this.length=0,this.map=new Object}put(e,t){e in this.map||this.length++,this.map[e]=t}get(e){return e in this.map?this.map[e]:null}remove(e){e in this.map&&(delete this.map[e],this.length--)}size(){return this.length}clear(){length=0,this.map=new Object}}class f{constructor(e){const{el:t,data:r,dom:i}=e;let s=h.isString(t)?document.querySelector(t):t;var l,n,o;this.data=r,this.ve=this.getVirtualElement(this.applyTruthfulData(i)),this.w=this.ve.render(),s.appendChild(this.w),this.observeMap=new u,l=this.data,n=this.observeMap,o=()=>{this.updatedom(i)},Object.keys(l).forEach(e=>{let t=l[e],r=new d;n.put(e,r),Object.defineProperty(l,e,{get:()=>(r.add(o),t),set(e){const i=t!==e;t=e,i&&r.invoke()}})}),this.updatedom(i)}updatedom(e){let t=this.getVirtualElement(this.applyTruthfulData(e));var r,i,s;window.nve=t,window.ve=this.ve,r=this.w,s=this.ve,i=new a(s,t).patches,new c(r,i),this.ve=t}watch(e,t){this.observeMap.get(e).add(t)}getVirtualElement(e){let t=[];for(let r in e.children){let i=e.children[r];if(i instanceof Array)i.forEach(e=>{let r=this.getVirtualElement(e);t.push(r)});else if(i instanceof Object){let e=this.getVirtualElement(i);t.push(e)}else t.push(i)}return function(e,t,r){return new o(e,t,r)}(e.tag,e.props,t)}applyTruthfulData(e){if("for"in e.props||"for_for"in e.props){let t,r=[],i=!1;if(e.props.for){if(h.isForOrForFor(e.props.for))if(e.forData){if(h.isForIn(e.props.for))throw new Error("plase use _in direction");r=e.forData,t=e.props.for.split(" _in")[0]}else{if(h.isForForIn(e.props.for))throw new Error("plase use _in_ direction");r=this.data[e.props.for.split(" _in_ ")[1]],t=e.props.for.split(" _in_ ")[0]}}else{if(!e.props.for_for)throw new Error("the for direction use error");if(h.isForOrForFor(e.props.for_for)){if(h.isForForIn(e.props.for_for))throw new Error("plase use _in_ direction");i=!0,r=this.data[e.props.for_for.split(" _in_ ")[1]],t=e.props.for_for.split(" _in_ ")[0]}}let s=[];return r.forEach(r=>{let l={};l.tag=e.tag,l.children=[],l.props={};for(let s in e.children)h.isString(e.children[s])?f.isPlaceHolder(e.children[s])?-1==f.getPlaceHolderValue(e.children[s]).indexOf(t)?l.children[s]=this.data[f.getPlaceHolderValue(e.children[s])]:l.children[s]=r[f.getPlaceHolderValue(e.children[s]).split(".")[1]]:l.children[s]=e.children[s]:(i&&(e.children[s].forData=r),l.children[s]=this.applyTruthfulData(e.children[s]));let n=Object.keys(e.props);for(let i in n){let s=n[i];if("style"===s){let i=e.props[s];if(i.indexOf(",")>-1){let e=i.split(",");l.props[s]=this.handleArrayStyle(r,e,t)}else l.props[s]=this.handleSingleStyle(r,i,t)}else f.isPlaceHolder(e.props[s])?-1==f.getPlaceHolderValue(e.props[s]).indexOf(t)?l.props[s]=this.data[f.getPlaceHolderValue(e.props[s])]:l.props[s]=r[f.getPlaceHolderValue(e.props[s]).split(".")[1]]:l.props[s]=e.props[s]}s.push(l)}),s}{let t={};t.tag=e.tag,t.children=[],t.props={};for(let r in e.children)h.isString(e.children[r])?f.isPlaceHolder(e.children[r])?t.children[r]=this.data[f.getPlaceHolderValue(e.children[r])]:t.children[r]=e.children[r]:t.children[r]=this.applyTruthfulData(e.children[r]);let r=Object.keys(e.props);for(let i in r){let s=r[i];if("style"===s){let r=e.props[s];if(r.indexOf(",")>-1){let e=r.split(",");t.props[s]=this.handleArrayStyle(this.data,e,void 0)}else t.props[s]=this.handleSingleStyle(this.data,r,void 0)}else f.isPlaceHolder(e.props[s])?t.props[s]=this.data[f.getPlaceHolderValue(e.props[s])]:t.props[s]=e.props[s]}return t}}handleSingleStyle(e,t,r){let i="";if(r)if(f.isPlaceHolder(t))if(-1!=f.getPlaceHolderValue(t).indexOf(r)){i=e[f.getPlaceHolderValue(t).split(".")[1]]}else{let r=t.split(":")[0],s=t.split(":")[1];i=r+":"+(s=e[f.getPlaceHolderValue(s)])}else i=t;else{let r=t.split(":")[0],s=t.split(":")[1];i=f.isPlaceHolder(s)?r+":"+(s=e[f.getPlaceHolderValue(s)]):t}return i}handleArrayStyle(e,t,r){let i="";for(let s of t){i+=this.handleSingleStyle(e,s,r)+";"}return i}static isPlaceHolder(e){return!!e&&!(!e.startsWith("%#")||!e.endsWith("#%"))}static getPlaceHolderValue(e){return e.slice(2,-2)}}t.default=f}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,